name: Advent of Code CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  BUILD_TYPE: Release
  BUILD_DIR: build

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            generator: "MinGW Makefiles"
            shell: cmd
            exe_extension: .exe
          - os: ubuntu-latest
            generator: "Ninja"
            shell: bash
            exe_extension: ""

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r utils/InputDownloader/requirements.txt

    - name: Download AoC inputs
      env:
        AOC_SESSION_COOKIE: ${{ secrets.AOC_SESSION_COOKIE }}
      run: |
        python utils/InputDownloader/downloader.py

    - name: Cache CMake build
      uses: actions/cache@v3
      with:
        path: ${{ env.BUILD_DIR }}
        key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-

    # - name: Install dependencies (Linux)
    #   if: runner.os == 'Linux'
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y ninja-build g++

    # - name: Install dependencies (Windows)
    #   if: runner.os == 'Windows'
    #   run: |
    #     choco install mingw -y

    - name: Configure CMake
      run: |
        cmake -S . -B ${{ env.BUILD_DIR }} \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build project
      run: |
        cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }}

    - name: Run tests (Linux)
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ env.BUILD_DIR }}/2024
      shell: bash
      run: |
        pwd && ls && ./solution

    - name: Run tests (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ${{ env.BUILD_DIR }}/2024
      shell: cmd
      run: |
        dir && solution.exe
  

    - name: Upload artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-output-${{ runner.os }}
        path: ${{ env.BUILD_DIR }}